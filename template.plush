// Code generated by oto; DO NOT EDIT.

package <%= def.PackageName %>

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
	<%= for (importPath, name) in def.Imports { %>
	<%= name %> "<%= importPath %>"
	<% } %>
)

<%= for (service) in def.Services { %>
type <%= service.Name %> interface {
<%= for (method) in service.Methods { %>
	<%= method.Name %>(context.Context, <%= method.InputObject.TypeName %>) (*<%= method.OutputObject.TypeName %>, error)<% } %>
}
<% } %>

<%= for (service) in def.Services { %>
type <%= camelize_down(service.Name) %>Server struct {
	server *Server
	<%= camelize_down(service.Name) %> <%= service.Name %>
}

func Register<%= service.Name %>(server *Server, <%= camelize_down(service.Name) %> <%= service.Name %>) {
	handler := &<%= camelize_down(service.Name) %>Server{
		server: server,
		<%= camelize_down(service.Name) %>: <%= camelize_down(service.Name) %>,
	}
	<%= for (method) in service.Methods { %>server.Register("<%= service.Name %>", "<%= method.Name %>", handler.handle<%= method.Name %>)
	<% } %>}
<%= for (method) in service.Methods { %>
func (s *<%= camelize_down(service.Name) %>Server) handle<%= method.Name %>(w http.ResponseWriter, r *http.Request) {
	var request <%= method.InputObject.TypeName %>
	if err := decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}

	response, err := s.<%= camelize_down(service.Name) %>.<%= method.Name %>(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	
  if err := encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}
<% } %>
<% } %>

<%= for (object) in def.Objects { %>
type <%= object.Name %> struct {
	<%= for (field) in object.Fields { %><%= field.Name %> <%= if (field.Type.Multiple == true) { %>[]<% } %><%= field.Type.TypeName %> `json:"<%= field.NameLowerCamel %><%= if (field.OmitEmpty) { %>,omitempty<% } %>"`
<% } %>
}
<% } %>

type Server struct {
	Basepath string
	routes map[string]http.Handler
	NotFound http.Handler
	OnErr func(w http.ResponseWriter, r *http.Request, err error)
}

func NewServer() *Server {
	return &Server{
		Basepath: "/rpc/",
		routes:   make(map[string]http.Handler),
		OnErr: func(w http.ResponseWriter, r *http.Request, err error) {
			encode(w, r, http.StatusInternalServerError, struct {
				Error string `json:"error"`
			}{
				Error: err.Error(),
			})
		},
		NotFound: http.NotFoundHandler(),
	}
}

func (s *Server) Register(service, method string, h http.HandlerFunc) {
	s.routes[fmt.Sprintf("%s%s.%s", s.Basepath, service, method)] = h
}

func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		s.NotFound.ServeHTTP(w, r)
		return
	}
	h, ok := s.routes[r.URL.Path]
	if !ok {
		s.NotFound.ServeHTTP(w, r)
		return
	}
	h.ServeHTTP(w, r)
}

func encode(w http.ResponseWriter, r *http.Request, status int, v interface{}) error {
	b, err := json.MarshalIndent(v, "", "  ")
	if err != nil {
		return fmt.Errorf("encode json: %w", err)
	}

  w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(status)

  if _, err := w.Write(b); err != nil {
		return err
	}
	
  return nil
}

func decode(r *http.Request, v interface{}) error {
	body, err := io.ReadAll(io.LimitReader(r.Body, 1024*1024))
	if err != nil {
		return fmt.Errorf("decode: read body: %w", err)
	}
	
  if err := json.Unmarshal(body, v); err != nil {
		return fmt.Errorf("decode: json.Unmarshal: %w", err)
	}
	
  return nil
}

type RPC struct {
	*http.Client
	Endpoint  string
	BeforeRequest func(r *http.Request) error
}

func New(endpoint string) *RPC {
	return &RPC{
		Endpoint: endpoint,
		Client: &http.Client{Timeout:10*time.Second},
	}
}

<%= for (service) in def.Services { %>
<%= format_comment_text(service.Comment) %>type <%= service.Name %>Client struct {
	rpc *RPC
}

func New<%= service.Name %>Client(rpc *RPC) *<%= service.Name %>Client {
	return &<%= service.Name %>Client{
		rpc: rpc,
	}
}

<%= for (method) in service.Methods { %>
<%= format_comment_text(method.Comment) %>func (s *<%= service.Name %>Client) <%= method.Name %>(ctx context.Context, r <%= method.InputObject.TypeName %>) (*<%= method.OutputObject.TypeName %>, error) {
	data, err := json.Marshal(r)
	if err != nil {
		return nil, fmt.Errorf("%w: <%= service.Name %>.<%= method.Name %>: marshal <%= method.InputObject.TypeName %>", err)
	}

	rawurl := s.rpc.Endpoint + "<%= service.Name %>.<%= method.Name %>"

	req, err := http.NewRequest(http.MethodPost, rawurl, bytes.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("%w: <%= service.Name %>.<%= method.Name %>: NewRequest", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept-Encoding", "gzip")
	
  req = req.WithContext(ctx)
	
  if s.rpc.BeforeRequest != nil {
		err = s.rpc.BeforeRequest(req)
		if err != nil {
			return nil, err
		}
	}
	
  resp, err := s.rpc.Do(req)
	if err != nil {
		return nil, fmt.Errorf("%w: <%= service.Name %>.<%= method.Name %>", err)
	}
	defer resp.Body.Close()
	
  var response struct {
		<%= method.OutputObject.TypeName %>
		Error string
	}
	
  data, err = io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("%w: <%= service.Name %>.<%= method.Name %>: read response body", err)
	}
	
  if err := json.Unmarshal(data, &response); err != nil {
		if resp.StatusCode != http.StatusOK {
			return nil, fmt.Errorf("<%= service.Name %>.<%= method.Name %>: (%d) %v", resp.StatusCode, string(data))
		}
		return nil, err
	}
	
  if response.Error != "" {
		return nil, fmt.Errorf(response.Error)
	}
	
  return &response.<%= method.OutputObject.TypeName %>, nil
}
<% } %>
<% } %>
